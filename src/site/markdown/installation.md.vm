#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')

$h1 TopCAT Server Installation Guide

This document attempts to revise the full Topcat installation guide for a server-side-only installation.

$h2 Compatibility

TopCAT requires Java 8+, icat.server 4.6+ and ids.server 1.5.0.+

TopCAT 2.4.3 reflects schema changes added in icat.server 4.10. If your configuration requires any of these
schema changes then you should install 2.4.3 or later.

$h2 Prerequisites

  - The TopCAT distribution: [topcat-${project.version}-distro.zip](${repoUrl}/org/icatproject/topcat/${project.version}/topcat-${project.version}-distro.zip)
    **TODO**: server-only distribution details have yet to be determined (probably post-fork)
  - A suitable deployed container (here assumed to be glassfish) to support a web application. Testing has been carried out with Glassfish 4.0. [Glassfish installation instructions](http://icatproject.org/installation/glassfish/) are available.
  -  A database as described in [Database installation instructions](http://icatproject.org/installation/database/) installed on the server.
  - Python (version 2.4 to 2.7) installed on the server.
  - if the `topcat_admin` script is required, the Python `requests` module must be installed (which may require other packages in turn).

$h2 Summary of Steps

  1. Please follow the [generic installation instructions](http://icatproject.org/installation/component/) 
  1. Check that it works by trying to connect with the `topcat_admin` script.

$h2 Schema upgrade

If you are using an older version of Topcat you may need to apply some migrations to your database. These can be found in the "migrations/" directory within the Topcat release.

$h3 Upgrade 2.4.1 schema to 2.4.2

The CACHE table now requires an extra column, CREATION_TIME. The simplest upgrade is to drop the
existing table; this is done by the provided migration scripts.

$h3 Upgrade 2.3.x schema to 2.4.0

For MySQL:

```
  ALTER TABLE `DOWNLOAD` 
    DROP COLUMN `TRANSPORT_URL`,
    DROP COLUMN `ICAT_URL`;
```

For Oracle:

```
  ALTER TABLE DOWNLOAD DROP (TRANSPORT_URL,ICAT_URL);
```

This migration should be performed before deploying Topcat.


$h3 Upgrade 2.1.0 schema to 2.2.0

For MySQL:

```
  ALTER TABLE `DOWNLOAD` ADD `THE_SIZE` bigint(20) DEFAULT NULL;
```

For Oracle:

```
  ALTER TABLE DOWNLOAD ADD THE_SIZE NUMBER(19, 0) DEFAULT 0 NOT NULL;
```

$h2 Configuration Overview

The server configuration consists of two files:

  * **topcat-setup.properties** - used to configure the application container e.g. database connection and mail server etc...
  * **topcat.properties** - used to configure Topcat (application) specific settings e.g. email messages or IDS polling intervals.

$h2 topcat-setup.properties

Note: '#'s are comments.

```
  # Derby Database
  !db.target   = derby
  !db.driver   = org.apache.derby.jdbc.ClientDataSource
  !db.url      = jdbc:derby:topcat;create\\=true
  !db.username = APP
  !db.password = APP

  # MySQL Database
  db.target      = mysql
  db.url         = jdbc:mysql://localhost:3306/topcat
  db.driver      = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
  db.username    = icat
  db.password    = icat

  secure         = true
  container      = Glassfish
  home           = /home/fisher/pf/glassfish4
  port           = 4848

  # Email setup see http://docs.oracle.com/cd/E26576_01/doc.312/e24938/create-javamail-resource.htm#GSRFM00035
  mail.host=smtp.example.com
  mail.user=user@example.com
  mail.from=no-reply@example.com

  #see https://javamail.java.net/nonav/docs/api/ for list of properties
  mail.property=mail.smtp.port="25":mail.smtp.from="no-reply@example.com"
```

The mail.xxx properties can be omitted if email support is not required in Topcat (but see **IMPORTANT** below).
In this case, mail.enable in topcat.properties MUST NOT be set to true. This is NOT checked during setup.

**IMPORTANT** The mail.xxx properties must NOT be omitted if Topcat is configured to download from two-tier IDS instances.
This is true even if mail is not required; in that case, dummy values such as the above can be used.

$h2 topcat.properties

$h3 New in 2.4.4

The `ids.timeout` property can now have an optional `s` or `m` suffix to specify seconds or minutes.
The default remains milliseconds (so existing configurations do not need to be changed).

$h3 New properties in 2.4.2

New properties have been added to allow finer control over caching of Investigation sizes.
Investigations can change size over time, so setting a lifetime on cached values may be useful.
It may be useful not to cache zero-sized Investigations at all.

These properties are optional, and the defaults preserve the original behaviour, so they need 
not be added when upgrading.

```
  # Lifetime in seconds for cached Investigation sizes (default is 0, which means "immortal")
  investigationSizeCacheLifetimeSeconds=600

  # Whether to cache zero-sized Investigations (default is false)
  neverCacheZeroSizedInvestigations=true
```

$h3 Upgrade from 2.3.6 to 2.4.0

If you are upgrading from 2.3.6 or earlier to 2.4.0, the following properties should be added to your topcat.properties:
`facility.list`, `facility.[facilityName].icatUrl`, `facility.[facilityName].idsUrl` (for each `facilityName` in `facility.list`).

Where a facility offers multiple download transfer types (as specified in topcat.json), a specific URL (prefix) for a particular facility
and download type can be specified by defining `facility.[facilityName].downloadType.[transport]` - see below for examples.
If the property is not defined for a particular facility and download type, the facility's idsUrl will be used instead.

Note: '#'s are comments.

```
  # List of Facility names
  # These names will be used by Topcat over the REST API;
  # each name must be mapped to ICAT / IDS urls.
  # Edit these values to match your installation.

  facility.list = LILS YFH

  facility.LILS.icatUrl = http://localhost:8080
  facility.LILS.idsUrl = http://localhost:8080
  facility.YFH.icatUrl = https://your.facility.icatUrl.here
  facility.YFH.idsUrl = https://your.facility.idsUrl.here

  # Download transport URLs
  # One or more download transport types may be defined for each facility, egs "https", "globus";
  # each may have a distinct download URL (prefix). To specify the download URL for a specific facility
  # and transport type, set an appropriate property as below.
  # Note that the transport type will be set in API requests,
  # but the URL to specify here should be the IDS url that will be used in the Java clients;
  # so it may be that the API transport type https should be mapped here to an
  # internal http URL.
  # If the property is not defined, Topcat will use the facility's idsUrl by default.

  facility.LILS.downloadType.http = http://localhost:8080
  facility.YFH.downloadType.https = https://your.facility.downloadIdsUrl.here
  facility.YFH.downloadType.globus = https://your.facility.globusUrl.here

  # enable send email
  mail.enable=true

  # The email subject. Tokens available are:
  # ${userName} - user username
  # ${email} - user email
  # ${facilityName} - the facility key (defined in frontend config)
  # ${preparedId} - the prepared Id of the download request
  # ${fileName} - the download name
  # ${size} - the download size
  # ${downloadUrl} - the download url
  mail.subject=TopCAT Download ${fileName} Ready

  # The email body message for https downloads. All subject tokens as above are available.
  mail.body.https=Hi ${userName},\n\nYour ${size} download ${fileName} has been prepared and is ready for download at ${downloadUrl}.\n\nThank you for using TopCAT.

  # The email body message for https downloads. All subject tokens as above are available.
  mail.body.globus=Hi ${userName}, \n\nYour ${size} Globus download ${fileName} is ready. Please see https:/example.com/#/globus-faq for more information on how to download using Globus.\n\nThank you for using TopCAT

  # The email body message for smartclient downloads. All subject tokens as above are available.
  mail.body.smartclient=Hi ${userName}, \n\nYour ${size} SmartClient download ${fileName} is ready. Please check your smartclient home directory for your files.\n\nThank you for using TopCAT

  # The email body message for SCARF downloads. All subject tokens as above are available.
  mail.body.scarf=Hi ${userName}, \n\nYour ${size} SCARF download ${fileName} is ready. Please see https:/example.com/#/scarf-faq for more information on how to download using SCARF.\n\nThank you for using TopCAT

  # The maximum number of datafiles for a getStatus call to the IDS for two level storage
  ids.getStatus.max=100

  # The delay in seconds before polling starts. This delay is to gives the ids a chance to do its thing before we query it
  poll.delay=600

  # The wait time in seconds between each poll to the IDS.
  poll.interval.wait=600

  # A list of usernames that can use the admin REST API and (if present) the Topcat admin user interface
  adminUserNames=simple/root, uows/elz087, asd345, ldap/fgh123

  # The maximum number objects that can be cached before pruning will take place
  maxCacheSize=100000

  # The following properties allow finer control over caching of Investigation sizes.
  # Investigations can change size over time, so setting a lifetime on cached values may be useful.
  # It may be useful not to cache zero-sized Investigations at all.

  # Lifetime in seconds for cached Investigation sizes (default is 0, which means "immortal")
  # investigationSizeCacheLifetimeSeconds=600

  # Whether to cache zero-sized Investigations (default is false)
  # neverCacheZeroSizedInvestigations=false
  
  # Timeout for IDS connections.
  # Optional (default is no timeout). Can be in seconds (suffix 's'), minutes ('m') or milliseconds (no suffix)
  # ids.timeout=180000
  # ids.timeout=180s
  # ids.timeout=3m
```

$h2 The "content" directory

**Note:** `content.example` is still included in the distribution, but is probably irrelevant for a server-only installation.

After unzipping a Topcat release you will be presented with a directory called "content.example", which you need to make a copy of called "content" i.e.

```bash
  cp -R content.example content
```

This newly created directory allows you to either replace or add files within the war file (which is actually the same format as a zip file), to view the existing contents of this war (i.e. zip) file by running the following:

```bash
  unzip -l topcat-2.4.0.war
```

after running:

```bash
  ./setup install
```

the contents of the "content" directory will be injected into the war file just before deploying.

You can use this feature to create a "pages" directory, which is where the html content specified within topcat.json's "pages" section is defined, you can also this feature to replace or add any other content e.g. the favicon.

$h2 topcat_admin

The topcat_admin script was added to Topcat in October 2017, but was not included in the distribution until version 2.4.4.
It uses the new REST API for disabling/enabling download types (which cannot be done from the browser Admin interface at present.)
The setup script will copy this script to the user's bin directory if it exists. (It does not insist that it exists, for
backwards compatibility with installation processes that work with previous versions.)

topcat_admin requires the Python `requests` module to be installed; setup neither checks nor ensures that this is the case.
The script can be run from any suitable system; it need not be run on the Topcat server.
