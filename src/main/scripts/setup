#!/usr/bin/env python
from setup_utils import *
import os
import re

# topcat

def uninstall():
    app = actions.getAppName("topcat")
    if app: actions.undeploy(app)
    actions.unregisterDB("topcat")
    actions.deleteMailResource("mail/topcat")

actions, arg, props = getActions("topcat-setup.properties", ["db.driver", "db.url", "db.username", "db.password"])

prop_name = "topcat.properties"
prop_list = []

if arg in ["CONFIGURE", "INSTALL"]: 
    actions.configure(prop_name, prop_list) 
    for f in ["topcat.json", "lang.json", "topcat.css"]:
        actions.configureFileForWar(f)
    actions.checkNoErrors()

if arg == "INSTALL":
    actions.installFile(prop_name)
           
    try:
        uninstall()

        actions.registerDB("topcat", props["db.driver"], props["db.url"], props["db.username"], props["db.password"])

        actions.createMailResource("mail/topcat", props["mail.host"], props["mail.user"], props["mail.from"], props["mail.property"])
 
        files = []
        files.append(["topcat.json", "config"])
        files.append(["lang.json", "languages"])
        files.append(["topcat.css", "styles"])

        if os.path.exists("logback.xml"): files.append(["logback.xml", "WEB-INF/classes"])

        for root, subdirs, _files in os.walk("content/"):
            to = re.sub("^content", ".", root)
            for file in _files:
                files.append([root + "/" + file, to])

        
        actions.deploy(files=files, deploymentorder=140)

    except Exception, e:
        abort(str(e))

else:  # UNINSTALL
    actions.removeFile(prop_name)

    try:
        uninstall();

    except Exception, e:
        abort(str(e))
